{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/cscal.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cmulf from '@stdlib/complex-float32-base-mul';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} alpha - constant\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @returns {Complex64Array} input array\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var alpha = new Complex64( 2.0, 2.0 );\n*\n* cscal( 3, alpha, x, 1, 0 );\n* // x => <Complex64Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction cscal( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx.set( cmulf( alpha, x.get( ix ) ), ix );\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default cscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} alpha - constant\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @returns {Complex64Array} input array\n*\n* @example\n* import Complex64Array from '@stdlib/array-complex64';\n* import Complex64 from '@stdlib/complex-float32-ctor';\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var alpha = new Complex64( 2.0, 2.0 );\n*\n* cscal( 3, alpha, x, 1 );\n* // x => <Complex64Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction cscal( N, alpha, x, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, alpha, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nexport default cscal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport cscal from './cscal.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( cscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default cscal;\n"],"names":["cscal","N","alpha","x","strideX","offsetX","ix","i","set","cmulf","get","ndarray","stride2offset","setReadOnly"],"mappings":";;2SA+CA,SAASA,EAAOC,EAAGC,EAAOC,EAAGC,EAASC,GACrC,IAAIC,EACAC,EAEJ,GAAKN,GAAK,EACT,OAAOE,EAGR,IADAG,EAAKD,EACCE,EAAI,EAAGA,EAAIN,EAAGM,IACnBJ,EAAEK,IAAKC,EAAOP,EAAOC,EAAEO,IAAKJ,IAAQA,GACpCA,GAAMF,EAEP,OAAOD,CACR,CCbA,SAASH,EAAOC,EAAGC,EAAOC,EAAGC,GAE5B,OAAOO,EAASV,EAAGC,EAAOC,EAAGC,EADpBQ,EAAeX,EAAGG,GAE5B,CCrBAS,EAAAb,EAAA,UAAAW"}