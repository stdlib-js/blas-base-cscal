{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/cscal.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar cmulf = require( '@stdlib/complex-float32-base-mul' );\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} alpha - constant\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @returns {Complex64Array} input array\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var Complex64 = require( '@stdlib/complex-float32-ctor' );\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var alpha = new Complex64( 2.0, 2.0 );\n*\n* cscal( 3, alpha, x, 1, 0 );\n* // x => <Complex64Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction cscal( N, alpha, x, strideX, offsetX ) {\n\tvar ix;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx.set( cmulf( alpha, x.get( ix ) ), ix );\n\t\tix += strideX;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cscal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Scales a single-precision complex floating-point vector by a single-precision complex floating-point constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Complex64} alpha - constant\n* @param {Complex64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @returns {Complex64Array} input array\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var Complex64 = require( '@stdlib/complex-float32-ctor' );\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var alpha = new Complex64( 2.0, 2.0 );\n*\n* cscal( 3, alpha, x, 1 );\n* // x => <Complex64Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\nfunction cscal( N, alpha, x, strideX ) {\n\tvar ox = stride2offset( N, strideX );\n\treturn ndarray( N, alpha, x, strideX, ox );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cscal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar cscal = require( './cscal.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( cscal, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = cscal;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* BLAS level 1 routine to scale a single-precision complex floating-point vector by a single-precision complex floating-point constant.\n*\n* @module @stdlib/blas-base-cscal\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var Complex64 = require( '@stdlib/complex-float32-ctor' );\n* var cscal = require( '@stdlib/blas-base-cscal' );\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var alpha = new Complex64( 2.0, 2.0 );\n*\n* cscal( 3, alpha, x, 1 );\n* // x => <Complex64Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var Complex64 = require( '@stdlib/complex-float32-ctor' );\n* var cscal = require( '@stdlib/blas-base-cscal' );\n*\n* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var alpha = new Complex64( 2.0, 2.0 );\n*\n* cscal.ndarray( 3, alpha, x, 1, 0 );\n* // x => <Complex64Array>[ -2.0, 6.0, -2.0, 14.0, -2.0, 22.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar cscal;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tcscal = main;\n} else {\n\tcscal = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cscal;\n\n// exports: { \"ndarray\": \"cscal.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,kCAAmC,EAyBxD,SAASC,EAAOC,EAAGC,EAAOC,EAAGC,EAASC,EAAU,CAC/C,IAAIC,EACAC,EAEJ,GAAKN,GAAK,EACT,OAAOE,EAGR,IADAG,EAAKD,EACCE,EAAI,EAAGA,EAAIN,EAAGM,IACnBJ,EAAE,IAAKJ,EAAOG,EAAOC,EAAE,IAAKG,CAAG,CAAE,EAAGA,CAAG,EACvCA,GAAMF,EAEP,OAAOD,CACR,CAKAL,EAAO,QAAUE,ICjEjB,IAAAQ,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAU,IAwBd,SAASC,EAAOC,EAAGC,EAAOC,EAAGC,EAAU,CACtC,IAAIC,EAAKP,EAAeG,EAAGG,CAAQ,EACnC,OAAOL,EAASE,EAAGC,EAAOC,EAAGC,EAASC,CAAG,CAC1C,CAKAR,EAAO,QAAUG,ICvDjB,IAAAM,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAQ,IACRC,EAAU,IAKdF,EAAaC,EAAO,UAAWC,CAAQ,EAKvCH,EAAO,QAAUE,ICgBjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAQD,EAERC,EAAQC,EAMT,OAAO,QAAUD",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "cmulf", "cscal", "N", "alpha", "x", "strideX", "offsetX", "ix", "i", "require_cscal", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "cscal", "N", "alpha", "x", "strideX", "ox", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "cscal", "ndarray", "join", "tryRequire", "isError", "main", "cscal", "tmp"]
}
